diff --git a/TensorFlow2/Segmentation/MaskRCNN/main.py b/TensorFlow2/Segmentation/MaskRCNN/main.py
index 53b59d6e..859396a6 100644
--- a/TensorFlow2/Segmentation/MaskRCNN/main.py
+++ b/TensorFlow2/Segmentation/MaskRCNN/main.py
@@ -17,12 +17,12 @@ import os
 from argparse import Namespace
 
 from mrcnn_tf2.runtime.run import run_training, run_inference, run_evaluation
-from mrcnn_tf2.utils.dllogger import LoggingBackend
+# from mrcnn_tf2.utils.dllogger import LoggingBackend
 
 os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
 os.environ["TF_CPP_VMODULE"] = 'non_max_suppression_op=0,generate_box_proposals_op=0,executor=0'
 
-import dllogger
+# import dllogger
 
 from mrcnn_tf2.arguments import PARSER
 from mrcnn_tf2.config import CONFIG
@@ -48,11 +48,14 @@ def main():
     logging.getLogger('tensorflow').handlers.clear()
 
     # setup dllogger
+    '''
     dllogger.init(backends=[
         dllogger.JSONStreamBackend(verbosity=dllogger.Verbosity.VERBOSE, filename=params.log_file),
         LoggingBackend(verbosity=dllogger.Verbosity.VERBOSE)
     ])
     dllogger.log(step='PARAMETER', data=vars(params))
+    '''
+    print(vars(params), flush=True)
 
     # setup dataset
     dataset = Dataset(params)
diff --git a/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/ops/roi_ops.py b/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/ops/roi_ops.py
index 8670753e..250198b7 100644
--- a/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/ops/roi_ops.py
+++ b/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/ops/roi_ops.py
@@ -96,8 +96,8 @@ def _propose_rois_gpu(scores,
         pre_nms_boxes = tf.cast(pre_nms_boxes, dtype=tf.float32)
         pre_nms_scores = tf.cast(pre_nms_scores, dtype=tf.float32)

-        with tf.device('CPU:0'):
-            boxes, scores, _, _ = tf.image.combined_non_max_suppression(
+        # with tf.device('CPU:0'):
+        boxes, scores, _, _ = tf.image.combined_non_max_suppression(
                 pre_nms_boxes,
                 pre_nms_scores,
                 max_output_size_per_class=topk_limit,
diff --git a/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/runtime/callbacks.py b/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/runtime/callbacks.py
index 4e7b56c9..8ffbcdc5 100644
--- a/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/runtime/callbacks.py
+++ b/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/runtime/callbacks.py
@@ -23,7 +23,7 @@ class DLLoggerMetricsCallback(KerasCallback):
     Keras callback that saves metrics using DLLogger.
     """

-    def __init__(self, dllogger, log_every=10, log_learning_rate=False):
+    def __init__(self, log_every=10, log_learning_rate=False):
         """
         Args:
             dllogger (DLLogger): DLLogger instance.
@@ -32,7 +32,7 @@ class DLLoggerMetricsCallback(KerasCallback):
                 Cannot be used with AMP enabled as the used hack fails with AMP.
         """
         super().__init__()
-        self._dllogger = dllogger
+        # self._dllogger = dllogger
         self._log_every = log_every
         self._log_learning_rate = log_learning_rate

@@ -68,7 +68,8 @@ class DLLoggerMetricsCallback(KerasCallback):
         if not logs:
             return

-        self._dllogger.log(step=step, data=logs)
+        # self._dllogger.log(step=step, data=logs)
+        print(step, {k: v for k, v in logs.items()}, flush=True)


 class DLLoggerPerfCallback(KerasCallback):
@@ -76,9 +77,9 @@ class DLLoggerPerfCallback(KerasCallback):
     Keras callback that measures performance and logs it using DLLogger.
     """

-    def __init__(self, dllogger, batch_sizes, warmup_steps=0, log_every=None):
+    def __init__(self, batch_sizes, warmup_steps=0, log_every=None):
         super().__init__()
-        self._dllogger = dllogger
+        # self._dllogger = dllogger
         self._batch_sizes = batch_sizes
         self._warmup_steps = warmup_steps
         self._log_every = log_every
@@ -124,6 +125,17 @@ class DLLoggerPerfCallback(KerasCallback):

     def _log_perf(self, deltas, mode, step=tuple()):
         deltas = np.array(deltas)
+        data={
+                f'{mode}_throughput': self._calculate_throughput(deltas, self._batch_sizes[mode]),
+                f'{mode}_latency': self._calculate_latency(deltas),
+                f'{mode}_latency_90': self._calculate_latency_confidence(deltas, 90.0),
+                f'{mode}_latency_95': self._calculate_latency_confidence(deltas, 95.0),
+                f'{mode}_latency_99': self._calculate_latency_confidence(deltas, 99.0),
+                f'{mode}_time': self._calculate_total_time(self._start_timestamps[mode], time.time())
+            }
+        print(step, data, flush=True)
+
+        '''
         self._dllogger.log(
             step=step,
             data={
@@ -135,6 +147,7 @@ class DLLoggerPerfCallback(KerasCallback):
                 f'{mode}_time': self._calculate_total_time(self._start_timestamps[mode], time.time())
             }
         )
+        '''

     @staticmethod
     def _calculate_throughput(deltas, batch_size):
diff --git a/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/runtime/run.py b/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/runtime/run.py
index d7b001b3..2fecc57c 100644
--- a/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/runtime/run.py
+++ b/TensorFlow2/Segmentation/MaskRCNN/mrcnn_tf2/runtime/run.py
@@ -2,7 +2,7 @@ import logging
 import os

 import tensorflow as tf
-import dllogger
+# import dllogger

 from mrcnn_tf2.model.mask_rcnn import MaskRCNN
 from mrcnn_tf2.runtime.callbacks import DLLoggerMetricsCallback, DLLoggerPerfCallback, PretrainedWeightsLoadingCallback
@@ -80,10 +80,14 @@ def run_evaluation(dataset, params):
         include_mask=params.include_mask
     )

+    '''
     dllogger.log(
         step=tuple(),
         data={k: float(v) for k, v in eval_results.items()}
     )
+    '''
+
+    print(tuple(), {k: float(v) for k, v in eval_results.items()}, flush=True)


 def run_inference(dataset, params):
@@ -112,8 +116,8 @@ def setup(params):
         logging.info('XLA is activated')

     if params.amp:
-        policy = tf.keras.mixed_precision.experimental.Policy("mixed_float16", loss_scale="dynamic")
-        tf.keras.mixed_precision.experimental.set_policy(policy)
+        policy = tf.keras.mixed_precision.Policy("mixed_float16")
+        tf.keras.mixed_precision.set_global_policy(policy)
         logging.info('AMP is activated')


@@ -143,12 +147,12 @@ def create_model(params):

 def create_callbacks(params):
     yield DLLoggerMetricsCallback(
-        dllogger=dllogger,
+        # dllogger=dllogger,
         log_every=params.log_every
     )

     yield DLLoggerPerfCallback(
-        dllogger=dllogger,
+        # dllogger=dllogger,
         batch_sizes={
             'train': params.train_batch_size * getattr(params, 'replicas', 1),
             'test': params.eval_batch_size * getattr(params, 'replicas', 1),
